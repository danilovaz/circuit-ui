{"version":3,"sources":["/Users/connorbaer/Code/GitHub/circuit-ui/src/components/Blockquote/Blockquote.js","/Users/connorbaer/Code/GitHub/circuit-ui/docs/content/components/blockquote.mdx"],"names":["baseStyles","_ref","theme","css","spacings","kilo","colors","p500","gigaStyles","_ref2","size","Text","GIGA","mega","StyledText","Object","styled_base_browser_esm","target","Quote","_ref3","children","props","objectWithoutProperties","core_browser_esm","esm_extends","element","italic","Blockquote","Blockquote_Quote","KILO","MEGA","defaultProps","layoutProps","MDXLayout","MDXContent","components","index_es","mdxType","id","Statuses","Stable","index_esm","__position","__code","__scope","this","Playground","Props","Fragment","Status","__codesandbox","components_Blockquote_Blockquote","of","parentName","react","isMDXComponent"],"mappings":"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","file":"static/js/docs-content-components-blockquote.df7c7cf1.js","sourcesContent":["/**\n * Copyright 2019, SumUp Ltd.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from '@emotion/styled';\nimport { css } from '@emotion/core';\n\nimport { childrenPropType } from '../../util/shared-prop-types';\nimport Text from '../Text';\n\nconst baseStyles = ({ theme }) => css`\n  label: blockquote;\n  padding-left: ${theme.spacings.kilo};\n  border-left: 2px solid ${theme.colors.p500};\n`;\n\nconst gigaStyles = ({ theme, size }) =>\n  size === Text.GIGA &&\n  css`\n    label: blockquote--giga;\n    padding-left: ${theme.spacings.mega};\n    border-left: 3px solid ${theme.colors.p500};\n  `;\n\nconst StyledText = styled(Text)`\n  ${baseStyles};\n  ${gigaStyles};\n`;\n\n/**\n * Indented and italicised text to denote a quotation.\n */\nconst Quote = ({ children, ...props }) => (\n  <StyledText {...props} element=\"blockquote\" italic>\n    {children}\n  </StyledText>\n);\n\n// Satisfy react docgen\nconst Blockquote = props => <Quote {...props} />;\n\nBlockquote.KILO = Text.KILO;\nBlockquote.MEGA = Text.MEGA;\nBlockquote.GIGA = Text.GIGA;\n\nBlockquote.propTypes = {\n  /**\n   * Child nodes to be rendered.\n   */\n  children: childrenPropType.isRequired,\n  /**\n   * A Circuit UI body text size.\n   */\n  size: PropTypes.oneOf([Blockquote.KILO, Blockquote.MEGA, Blockquote.GIGA])\n};\n\nQuote.propTypes = Blockquote.propTypes;\n\nBlockquote.defaultProps = {\n  size: Blockquote.KILO\n};\n\n/**\n * @component\n */\nexport default Blockquote;\n","/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\nimport { Playground, Props } from 'docz';\nimport { Fragment } from 'react';\nimport Blockquote from '../../../src/components/Blockquote/Blockquote';\nimport Status from '../../utils/Statuses';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"blockquote\"\n    }}>{`Blockquote`}</h1>\n    <Status.Stable />\n    <p>{`Blockquotes are a way of styling specific text with indention, normally used for demonstrating and highlighting textual information that comes from an external source.`}</p>\n    <Playground __position={1} __code={'<Blockquote>\\n  The ability to accept credit card payments that are EMV-compliant is\\n  essentially an insurance policy against fraud and an impressively economical\\n  one at that.\\n</Blockquote>'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      Fragment,\n      Blockquote,\n      Status\n    }} __codesandbox={`undefined`} mdxType=\"Playground\">\n  <Blockquote mdxType=\"Blockquote\">The ability to accept credit card payments that are EMV-compliant is essentially an insurance policy against fraud and an impressively economical one at that.\n      </Blockquote>\n    </Playground>\n    <Props of={Blockquote} mdxType=\"Props\" />\n    <h2 {...{\n      \"id\": \"when-to-use-it\"\n    }}>{`When to use it`}</h2>\n    <p>{`For highlighting pieces of textual information, usually quotes, that aren't from SumUp directly.\nFor instance, we should use a blockquote to highlight a quote from a merchant that was interviewed on a blog post regarding product development.`}</p>\n    <h2 {...{\n      \"id\": \"usage-guidelines\"\n    }}>{`Usage guidelines`}</h2>\n    <ul>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Do`}</strong>{` use blockquotes for citing quotes from merchants, partners or other external sources`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Do not`}</strong>{` place an image within a blockquote, they should contain only text.`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"component-variations\"\n    }}>{`Component variations`}</h2>\n    <p>{`You can customize the size of the blockquote using the `}<inlineCode parentName=\"p\">{`size`}</inlineCode>{` property.\nWe reccomend always sticking to mega in most cases, since it fits well with the Circuit's default body text size.`}</p>\n    <Playground __position={3} __code={'<Fragment>\\n  <Blockquote size={Blockquote.KILO}>\\n    Kilo - The ability to accept credit card payments that are EMV-compliant\\n    is essentially an insurance policy against fraud and an impressively\\n    economical one at that.\\n  </Blockquote>\\n  <Blockquote size={Blockquote.MEGA}>\\n    Mega - The ability to accept credit card payments that are EMV-compliant\\n    is essentially an insurance policy against fraud and an impressively\\n    economical one at that.\\n  </Blockquote>\\n  <Blockquote size={Blockquote.GIGA}>\\n    Giga - The ability to accept credit card payments that are EMV-compliant\\n    is essentially an insurance policy against fraud and an impressively\\n    economical one at that.\\n  </Blockquote>\\n</Fragment>'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      Fragment,\n      Blockquote,\n      Status\n    }} __codesandbox={`undefined`} mdxType=\"Playground\">\n  <Fragment mdxType=\"Fragment\">\n    <Blockquote size={Blockquote.KILO} mdxType=\"Blockquote\">Kilo - The ability to accept credit card payments that are EMV-compliant is essentially an insurance policy against fraud and an impressively economical one at that.\n        </Blockquote>\n    <Blockquote size={Blockquote.MEGA} mdxType=\"Blockquote\">Mega - The ability to accept credit card payments that are EMV-compliant is essentially an insurance policy against fraud and an impressively economical one at that.\n        </Blockquote>\n    <Blockquote size={Blockquote.GIGA} mdxType=\"Blockquote\">Giga - The ability to accept credit card payments that are EMV-compliant is essentially an insurance policy against fraud and an impressively economical one at that.\n        </Blockquote>\n  </Fragment>\n    </Playground>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  "],"sourceRoot":""}