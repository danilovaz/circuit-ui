{"version":3,"sources":["/Users/connorbaer/Code/GitHub/sumup/circuit-ui/docs/content/styles/components/MediaQueriesTable.js","/Users/connorbaer/Code/GitHub/sumup/circuit-ui/docs/content/styles/media-queries.mdx","/Users/connorbaer/Code/GitHub/sumup/circuit-ui/src/components/Table/index.js"],"names":["HEADERS","renderBreakpoint","bp","concat","toString","TableWrapper","withTheme","_ref","theme","Object","core_browser_esm","Table","headers","rows","keys","breakpoints","map","MediaQueriesTable","emotion_theming_browser_esm","themes","circuit","layoutProps","MDXLayout","MDXContent","components","props","objectWithoutProperties","index_es","esm_extends","mdxType","id","parentName","className","components_MediaQueriesTable","isMDXComponent","_Table__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","_components_TableRow__WEBPACK_IMPORTED_MODULE_1__","_components_TableCell__WEBPACK_IMPORTED_MODULE_2__","_components_TableHeader__WEBPACK_IMPORTED_MODULE_3__"],"mappings":"0nBAKMA,EAAU,CAAC,kBAAmB,SAE9BC,EAAmB,SAAAC,GACvB,MAAkB,kBAAPA,EACT,eAAAC,OAAsBD,EAAGE,WAAzB,OAGKF,GAGHG,EAAeC,YAAU,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,MAAH,OAC7BC,OAAAC,EAAA,EAAAD,CAACE,EAAA,EAAD,CACEC,QAASZ,EACTa,KAAMJ,OAAOK,KAAKN,EAAMO,aAAaC,IAAI,SAAAd,GAAE,MAAI,CAC7CA,EACAD,EAAiBO,EAAMO,YAAYb,WAKnCe,EAAoB,kBACxBR,OAAAC,EAAA,EAAAD,CAACS,EAAA,EAAD,CAAeV,MAAOW,IAAOC,SAC3BX,OAAAC,EAAA,EAAAD,CAACJ,EAAD,QAIWY,0PCxBf,IAKMI,EAAc,GAGdC,EAAY,UACH,SAASC,EAAThB,GAGZ,IAFDiB,EAECjB,EAFDiB,WACGC,EACFhB,OAAAiB,EAAA,EAAAjB,CAAAF,EAAA,gBACD,OAAOE,OAAAkB,EAAA,EAAAlB,CAACa,EAADb,OAAAmB,EAAA,EAAAnB,CAAA,GAAeY,EAAiBI,EAAhC,CAAuCD,WAAYA,EAAYK,QAAQ,cAE5EpB,OAAAkB,EAAA,EAAAlB,CAAA,KAAQ,CACNqB,GAAM,iBADR,iBAGArB,OAAAkB,EAAA,EAAAlB,CAAA,6HACoCA,OAAAkB,EAAA,EAAAlB,CAAA,cAAYsB,WAAW,KAAvB,YADpC,KAEAtB,OAAAkB,EAAA,EAAAlB,CAAA,KAAQ,CACNqB,GAAM,iBADR,iBAGArB,OAAAkB,EAAA,EAAAlB,CAAA,WAAKA,OAAAkB,EAAA,EAAAlB,CAAA,OAAAA,OAAAmB,EAAA,EAAAnB,CAAA,CAAMsB,WAAW,OAAU,CAC5BC,UAAa,wBADZ,wOAaLvB,OAAAkB,EAAA,EAAAlB,CAAA,KAAQ,CACNqB,GAAM,eADR,eAGArB,OAAAkB,EAAA,EAAAlB,CAAA,qKAEAA,OAAAkB,EAAA,EAAAlB,CAACwB,EAAD,CAAmBJ,QAAQ,sBAC3BpB,OAAAkB,EAAA,EAAAlB,CAAA,KAAQ,CACNqB,GAAM,6BADR,6BAGArB,OAAAkB,EAAA,EAAAlB,CAAA,UACEA,OAAAkB,EAAA,EAAAlB,CAAA,MAAIsB,WAAW,MAAf,4BAAiDtB,OAAAkB,EAAA,EAAAlB,CAAA,cAAYsB,WAAW,MAAvB,qBAAjD,kPAMNR,EAAWW,gBAAiB,kEC3D5B,IAAAC,EAAAC,EAAA,mCAAAC,EAAAD,EAAA,uDAAAE,EAAAF,EAAA,wDAAAG,EAAAH,EAAA,6rBAsBezB,MAAf","file":"static/js/docs-content-styles-media-queries.29779a30.js","sourcesContent":["import React from 'react';\nimport { withTheme, ThemeProvider } from 'emotion-theming';\nimport { theme as themes } from '../../../../src';\nimport Table from '../../../../src/components/Table';\n\nconst HEADERS = ['Breakpoint name', 'Query'];\n\nconst renderBreakpoint = bp => {\n  if (typeof bp === 'number') {\n    return `(min-width: ${bp.toString()}px)`;\n  }\n\n  return bp;\n};\n\nconst TableWrapper = withTheme(({ theme }) => (\n  <Table\n    headers={HEADERS}\n    rows={Object.keys(theme.breakpoints).map(bp => [\n      bp,\n      renderBreakpoint(theme.breakpoints[bp])\n    ])}\n  />\n));\n\nconst MediaQueriesTable = () => (\n  <ThemeProvider theme={themes.circuit}>\n    <TableWrapper />\n  </ThemeProvider>\n);\n\nexport default MediaQueriesTable;\n","/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\nimport Table from '../../../src/components/Table';\nimport MediaQueriesTable from './components/MediaQueriesTable';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"media-queries\"\n    }}>{`Media queries`}</h1>\n    <p>{`To use the media query utilities provided by Circuit themes, you'll use a\nfunction provided by the theme called `}<inlineCode parentName=\"p\">{`theme.mq`}</inlineCode>{`.`}</p>\n    <h2 {...{\n      \"id\": \"usage-in-code\"\n    }}>{`Usage in code`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import styled from '@emotion/styled';\nimport { css } from '@emotion/core';\n\nconst ResponsiveDiv = styled('div')\\`\n  \\${({ theme }) => css\\`\n    \\${theme.mq.mega}\n      padding-top: \\${theme.spacings.peta};\n    };\n  \\`};\n\\`;\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"breakpoints\"\n    }}>{`Breakpoints`}</h2>\n    <p>{`You can use the following breakpoints when implementing either components\ninside Circuit UI or writing code that should be theme-compliant in your app.`}</p>\n    <MediaQueriesTable mdxType=\"MediaQueriesTable\" />\n    <h2 {...{\n      \"id\": \"responsive-best-practices\"\n    }}>{`Responsive best practices`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`Do not refer directly to `}<inlineCode parentName=\"li\">{`theme.breakpoints`}</inlineCode>{`, but instead use the named\nmedia query helpers.`}</li>\n    </ul>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  ","/**\n * Copyright 2019, SumUp Ltd.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Table from './Table';\nimport TableRow from './components/TableRow';\nimport TableCell from './components/TableCell';\nimport TableHeader from './components/TableHeader';\n\nexport { TableRow, TableCell, TableHeader };\n\nexport default Table;\n"],"sourceRoot":""}