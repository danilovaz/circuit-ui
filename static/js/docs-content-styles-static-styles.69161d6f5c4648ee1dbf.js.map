{"version":3,"sources":["/Users/connorbaer/Code/GitHub/circuit-ui/docs/content/styles/static-styles.mdx"],"names":["layoutProps","MDXLayout","MDXContent","_ref","components","props","Object","_Users_connorbaer_Code_GitHub_circuit_ui_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_1__","_mdx_js_react__WEBPACK_IMPORTED_MODULE_4__","_Users_connorbaer_Code_GitHub_circuit_ui_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__","mdxType","id","parentName","className","href","isMDXComponent"],"mappings":"uhBAWMA,EAAc,GAGdC,EAAY,UACH,SAASC,EAATC,GAGZ,IAFDC,EAECD,EAFDC,WACGC,EACFC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,gBACD,OAAOG,OAAAE,EAAA,EAAAF,CAACL,EAADK,OAAAG,EAAA,EAAAH,CAAA,GAAeN,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYM,QAAQ,cAC5EJ,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNK,GAAM,iBADR,iBAGAL,OAAAE,EAAA,EAAAF,CAAA,+JACAA,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNK,GAAM,2BADR,2BAGAL,OAAAE,EAAA,EAAAF,CAAA,+FAA0FA,OAAAE,EAAA,EAAAF,CAAA,cAAYM,WAAW,KAAvB,sBAA1F,oDACAN,OAAAE,EAAA,EAAAF,CAAA,WAAKA,OAAAE,EAAA,EAAAF,CAAA,OAAAA,OAAAG,EAAA,EAAAH,CAAA,CAAMM,WAAW,OAAU,CAC5BC,UAAa,gBADZ,qoCAqBLP,OAAAE,EAAA,EAAAF,CAAA,2FAAsFA,OAAAE,EAAA,EAAAF,CAAA,IAAAA,OAAAG,EAAA,EAAAH,CAAA,CAAGM,WAAW,KAAQ,CACxGE,KAAQ,uDAD0E,sDAAtF,yFAGAR,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNK,GAAM,WADR,WAGAL,OAAAE,EAAA,EAAAF,CAAA,wNACAA,OAAAE,EAAA,EAAAF,CAAA,uEAAkEA,OAAAE,EAAA,EAAAF,CAAA,IAAAA,OAAAG,EAAA,EAAAH,CAAA,CAAGM,WAAW,KAAQ,CACpFE,KAAQ,iFADsD,yBAAlE,cAEiDR,OAAAE,EAAA,EAAAF,CAAA,cAAYM,WAAW,KAAvB,sBAFjD,6GAGAN,OAAAE,EAAA,EAAAF,CAAA,gDAA2CA,OAAAE,EAAA,EAAAF,CAAA,IAAAA,OAAAG,EAAA,EAAAH,CAAA,CAAGM,WAAW,KAAQ,CAC7DE,KAAQ,4CAD+B,8BAA3C,sDAE8FR,OAAAE,EAAA,EAAAF,CAAA,IAAAA,OAAAG,EAAA,EAAAH,CAAA,CAAGM,WAAW,KAAQ,CAChHE,KAAQ,uDADkF,YAF9F,iMAQJZ,EAAWa,gBAAiB","file":"static/js/docs-content-styles-static-styles.92361398.js","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"static-styles\"\n    }}>{`Static Styles`}</h1>\n    <p>{`Projects that can't or don't use React can still benefit from Circuit UI. They can use the styles by extracting the plain CSS from the components.`}</p>\n    <h2 {...{\n      \"id\": \"generating-a-stylesheet\"\n    }}>{`Generating a stylesheet`}</h2>\n    <p>{`Circuit UI offers a CLI to generate a stylesheet that is tailored to your project: `}<inlineCode parentName=\"p\">{`yarn static-styles`}</inlineCode>{`. Below is an overview of the available options:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-sh\"\n      }}>{`$ yarn static-styles --help\n\nUsage:\n  --theme             The name of the theme to use.\n                                      [options: \"circuit\"] [default: \"circuit\"]\n  --components        A comma separated list of the components to include.\n                      Also supports \"all\" or \"none\".\n                                                       [array] [default: \"all\"]\n  --global            Whether to include global styles.\n                                                     [boolean] [default: false]\n  --customProperties  Whether to use CSS custom properties (variables).\n                                                     [boolean] [default: false]\n  --pretty            Whether the CSS should be formatted with prettier.\n                                                     [boolean] [default: false]\n  --filePath          Path to the file where the stylesheet should be saved,\n                      relative to the current directory.               [string]\n  --help              Show help                                       [boolean]\n  --version           Show the version                                [boolean]\n`}</code></pre>\n    <p>{`A hosted version of a stylesheet with all supported components is available at `}<a parentName=\"p\" {...{\n        \"href\": \"https://circuit.sumup.com/static/circuit-ui-v1.css\"\n      }}>{`https://circuit.sumup.com/static/circuit-ui-v1.css`}</a>{`, however, we recommend generating a custom stylesheet with only the styles you need.`}</p>\n    <h2 {...{\n      \"id\": \"theming\"\n    }}>{`Theming`}</h2>\n    <p>{`At built time, when the styles are extracted to static CSS, any dynamic values are replaced by static values. By default, the theme values are hard-coded and cannot be changed with JavaScript at runtime.`}</p>\n    <p>{`In order to change the theme values at runtime you can use `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_custom_properties\"\n      }}>{`CSS custom properties`}</a>{`. Pass the `}<inlineCode parentName=\"p\">{`--customProperties`}</inlineCode>{` flag to the CLI to generate the CSS with custom properties and add the root values to the global styles.`}</p>\n    <p>{`Be aware that custom properties are `}<a parentName=\"p\" {...{\n        \"href\": \"https://caniuse.com/#feat=css-variables\"\n      }}>{`only supported in Edge 16+`}</a>{`. Depending on your target group, you should use a `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/jhildenbiddle/css-vars-ponyfill\"\n      }}>{`polyfill`}</a>{`.`}</p>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  "],"sourceRoot":""}